//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_lng {
            bindings = <&kp CLCK>;
            key-positions = <34 35>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
            &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y        &kp U            &kp I         &kp O        &kp P
            &hrm LGUI A  &hrm LALT S  &hrm LCTRL D  &hrm LSHFT F  &kp G        &kp H        &hrm RSHFT J     &hrm RCTRL K  &hrm RALT L  &hrm RGUI SEMICOLON
&caps_word  &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N        &kp M            &kp COMMA     &kp DOT      &kp FSLH             &kp SQT
                                      &lt 4 ESCAPE  &lt 1 SPACE   &lt 2 TAB    &lt 3 ENTER  &lt 1 BACKSPACE  &lt 4 DELETE
            >;
        };

        math {
            label = "MATH";
            bindings = <
        &trans            &trans        &trans     &trans          &trans    &kp ASTERISK  &kp NUMBER_7  &kp NUMBER_8     &kp NUMBER_9  &kp DOT
        &kp LEFT_COMMAND  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &kp MINUS     &kp NUMBER_4  &kp NUMBER_5     &kp NUMBER_6  &kp NUMBER_0
&trans  &trans            &trans        &trans     &trans          &trans    &kp PLUS      &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3  &kp SLASH     &kp EQUAL
                                        &trans     &trans          &trans    &trans        &trans        &kp RIGHT_SHIFT
            >;
        };

        navi {
            bindings = <
        &trans    &trans    &trans     &trans          &trans    &kp HOME  &kp PAGE_DOWN  &kp PG_UP   &kp END    &trans
        &kp LGUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &trans    &kp LEFT  &kp DOWN       &kp UP      &kp RIGHT  &kp K_COPY
&trans  &trans    &trans    &trans     &trans          &trans    &trans    &kp K_UNDO     &kp K_REDO  &trans     &kp K_CUT   &trans
                            &trans     &trans          &trans    &trans    &trans         &trans
            >;
        };

        symb {
            label = "SYMB";
            bindings = <
           &kp LEFT_BRACKET       &kp AMPERSAND    &kp ASTRK    &kp LPAR   &kp RIGHT_BRACKET    &trans  &trans     &trans     &trans    &trans
           &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp PERCENT  &kp CARET  &kp BACKSLASH        &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp GRAVE  &kp LEFT_BRACE         &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp RIGHT_BRACE      &trans  &trans     &trans     &trans    &trans    &trans
                                                   &trans       &trans     &trans               &trans  &trans     &trans
            >;
        };

        func {
            label = "ADJU";
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &trans    &bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &out OUT_TOG  &trans
        &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans      &kp RSHIFT  &kp RCTRL   &kp RALT      &kp RGUI
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans      &trans      &trans      &trans        &trans    &trans
                         &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };
    };
};
